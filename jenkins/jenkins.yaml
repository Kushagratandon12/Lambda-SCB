apiVersion: v1
kind: Service
metadata:
  name: jenkins
spec:
  type: ClusterIP
  selector:
    app: jenkins  
  ports:
  - port: 80
    name: "http"
    targetPort: 8080
  - port: 8080
    name: "ui"
    targetPort: 8080
  - port: 50000
    name: "slave"
    targetPort: 50000   
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jenkins
spec:
  serviceName: jenkins
  replicas: 1
  selector:
    matchLabels:
      app: jenkins    
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      initContainers:
      - name: init-chown
        image: alpine
        volumeMounts:
          - name: jenkins-home
            mountPath: /var/jenkins_home
        env:
        - name: JENKINS_HOME
          value: /var/jenkins_home
        - name: UID
          value: '1000'
        command:
        - sh
        - -c
        - if [ ! -f $JENKINS_HOME ]; then chown $UID:$UID -R $JENKINS_HOME; touch $JENKINS_HOME; chown $UID:$UID $JENKINS_HOME; fi
      containers:
        - name: jenkins
          image: brainupgrade/jenkins:kubectl
          securityContext:
            runAsUser: 0          
          env:
            - name: JAVA_OPTS
              value: -Djenkins.install.runSetupWizard=true -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85
          ports:
            - name: http-port
              containerPort: 8080
            - name: jnlp-port
              containerPort: 50000
          volumeMounts:
            - name: jenkins-home
              mountPath: /var/jenkins_home
            - name: docker-sock-volume
              mountPath: /var/run/docker.sock              
      volumes:
        - name: docker-sock-volume
          hostPath:
            path: /var/run/docker.sock              
  volumeClaimTemplates:
  - metadata:
      name: jenkins-home
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi            
